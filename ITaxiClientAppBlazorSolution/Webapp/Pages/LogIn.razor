@page "/login"
@using Base.Service.Contracts
@using System.Net.Http
@using BlazorWebApp.Services
@using System.ComponentModel.DataAnnotations
@using Webapp.ViewModels
@inject IHttpClientFactory _httpClientFactory
@inject IAppState _appState
@inject NavigationManager Nav
<h3>Log In</h3>
<EditForm EditContext="editContext" OnSubmit="@Login">
    <ValidationSummary  />
    <DataAnnotationsValidator />
    <label for="email">Email</label>
    <InputText @bind-Value="Email" placeholder="Email" name="email"></InputText>
    <ValidationMessage For="() => viewModel.Email" />
    <br />
    <label for="password">Password</label>
    <InputText type="password" placeholder="Password" @bind-Value="viewModel.Password" name="password"></InputText>
    <ValidationMessage For="() => viewModel.Password" />
    <br />
    <button type="submit">Login</button>
    <ValidationMessage For="() => viewModel.IsAuthenicated" />
    
</EditForm>
@code {
    private EditContext editContext;
    private ValidationMessageStore errorMessages;
    private LoginViewModel viewModel = new LoginViewModel();

    protected override void OnInitialized()
    {
        editContext = new EditContext(viewModel);
        errorMessages = new ValidationMessageStore(editContext);

    }

    #region Properties

    [Required(AllowEmptyStrings = false, ErrorMessage = "Email is required!")]
    [EmailAddress]
    public string Email { get => viewModel.Email; set => viewModel.Email = value; }

    [Required(AllowEmptyStrings = false, ErrorMessage = "Password is required")]
    public string Password { get => viewModel.Password; set => viewModel.Password = value; }

    public bool IsAuthenicated { get => viewModel.IsAuthenicated; set => viewModel.IsAuthenicated = value; }

    #endregion Properties

    public async Task Login()
    {
        IsAuthenicated = false;
        errorMessages.Clear();
        if(editContext.Validate())
        {
            var token = await AuthenticateToken(Email, Password);
            if (token.Token != null)
            {
                try
                {
                    _appState.AuthResponse = token;
                    IsAuthenicated = true;
                    Nav.NavigateTo("/");
                }
                catch 
                {
                    // Ignore errors, assume login failed

                }

            }
            else
            {
                errorMessages.Add(() => viewModel.IsAuthenicated, "Email and / or password wrong!");
            }
        }

    }

    private async Task<AuthResponse> AuthenticateToken(string email, string password)
    {
        AuthResponse authResponse = new AuthResponse();

        var client = this._httpClientFactory.CreateClient("Auth");

        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
        client.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");
        var response = await client.PostAsJsonAsync($"{client.BaseAddress!.ToString().TrimEnd('/')}/identity/account/login", new { Email = Email, Password = Password });
        if (response.IsSuccessStatusCode)
        {
            authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

        }

        return authResponse;
    }


}
