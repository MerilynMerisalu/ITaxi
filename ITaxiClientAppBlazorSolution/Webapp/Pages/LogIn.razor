@page "/login"
@using Base.Service.Contracts
@using System.Net.Http
@using BlazorWebApp.Services
@using System.ComponentModel.DataAnnotations
@using Webapp.Services
@using Webapp.ViewModels
@inject IHttpClientFactory _httpClientFactory
@inject IAppState _appState
@inject NavigationManager Nav

<h1>Log In</h1>
<MudText Color="Color.Error">
    <EditForm EditContext="editContext" OnValidSubmit="@Login">
    <ValidationSummary />
    <FluentValidationValidator></FluentValidationValidator>
    <MudTextField Label="Email" For="@(() => this.Email)" @bind-Value="Email" placeholder="Email" name="email"></MudTextField>
    <br />
    <MudTextField Label="Password" For="@(() => this.Password)" InputType="InputType.Password" type="password" placeholder="Password" @bind-Value="viewModel.Password" name="password"></MudTextField>
    
    <br />
    <MudButton ButtonType="ButtonType.Submit" OnClick=Login Variant="Variant.Filled" Color="Color.Primary">Log In</MudButton>
    <ValidationMessage For="() => viewModel.IsAuthenicated" />

    </EditForm>
</MudText>
@code {
    private EditContext? editContext;
    private ValidationMessageStore? errorMessages;
    private LoginViewModel viewModel = new LoginViewModel();

    protected override void OnInitialized()
    {
        editContext = new EditContext(viewModel);
        errorMessages = new ValidationMessageStore(editContext);

    }

    #region Properties

    [Required(AllowEmptyStrings = false)]
    [EmailAddress]
    public string Email { get => viewModel.Email; set => viewModel.Email = value; }

    [Required(AllowEmptyStrings = false, ErrorMessage = "Password is required")]
    public string Password { get => viewModel.Password; set => viewModel.Password = value; }

    public bool? IsAuthenicated { get => viewModel.IsAuthenicated; set => viewModel.IsAuthenicated = value; }

    #endregion Properties

    public async Task Login()
    {
        IsAuthenicated = null;
        errorMessages!.Clear();
        if (editContext!.Validate())
        {
            var validator = new ITaxiAuthTokenHandler(_appState, _httpClientFactory);
            var token = await validator.AuthenticateToken(Email, Password);
            if (token.Token != null)
            {
                try
                {
                    //viewModel.Token = token.Token;
                    await _appState.SetAuthResponse(token);
                    IsAuthenicated = true;
                    Nav.NavigateTo("/");
                }
                catch
                {


                }

            }
            else
            {
                viewModel.IsAuthenicated = false;
                editContext.Validate();
                // errorMessages.Add(() => viewModel.IsAuthenicated, "Email and / or password wrong!");
            }
        }

    }

    // private async Task<AuthResponse> AuthenticateToken(string email, string password)
    // {
    //     AuthResponse authResponse = new AuthResponse();

    //     var client = this._httpClientFactory.CreateClient("Auth");

    //     client.DefaultRequestHeaders.Clear();
    //     client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    //     client.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");
    //     var response = await client.PostAsJsonAsync($"{client.BaseAddress!.ToString().TrimEnd('/')}/identity/account/login", new { Email = Email, Password = Password });
    //     if (response.IsSuccessStatusCode)
    //     {
    //         authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

    //     }

    //     return authResponse!;
    // }


}
