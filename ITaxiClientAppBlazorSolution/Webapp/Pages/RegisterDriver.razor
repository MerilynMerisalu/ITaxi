@page "/registerDriver"
@using Base.Service.Contracts
@using ITaxi.Enum.Enum
@using ITaxi.Service
@using Public.App.DTO.v1.AdminArea
@using Webapp.Services
@using Webapp.ViewModels
@inject CityService cityService
@inject DriverLicenseCategoryService driverLicenseCategoryService
@inject RegisterService service
@inject NavigationManager nav
@inject IAppState _appState
@inject IHttpClientFactory _httpClientFactory
@inject ISnackbar bar;
<h1>Register Driver</h1>
<EditForm Model="vm" OnValidSubmit="Submit">
    <FluentValidationValidator></FluentValidationValidator>
    <ValidationSummary style="color:red"></ValidationSummary>
    <MudTextField @bind-Value="vm.FirstName" For="@( () => vm.FirstName)" Label="First Name" Placeholder="First Name" />
    <MudTextField @bind-Value="vm.LastName" For="@( () => vm.LastName)" Label="Last Name" Placeholder="Last Name" />
    <MudSelect @bind-Value="@vm.Gender" For="@( () => vm.Gender)" Label="Gender" Placeholder="Please Select a Gender" AnchorOrigin="Origin.CenterCenter">
        @foreach (var option in Enum.GetValues<Gender>())
        {
            <MudSelectItem T="Gender?" Value="@option">@option</MudSelectItem>
        }

    </MudSelect>
    <MudDatePicker Label="Date of Birth" Editable="true" @bind-Date="vm.DateOfBirth" Placeholder="Select Date" For="@(() => vm.DateOfBirth)"
                   MaxDate="DateTime.Today" />
    <MudTextField @bind-Value="vm.PersonalIdentifier" For="@( () =>  vm.PersonalIdentifier)" Placeholder="Personal Identifier" Label="Personal Identifier" />
    <MudSelect @bind-Value="@vm.City" For="@( () => vm.City)" Label="City" Placeholder="Please select a city"
               AnchorOrigin="Origin.CenterCenter">
        @if (Cities != null)
        {
            foreach (var option in Cities)
            {
                <MudSelectItem Value="@option">@option?.CityName</MudSelectItem>

            }
        }

    </MudSelect>
    <MudTextField @bind-Value="vm.Address" For="@( () => vm.Address)" Label="Address" Placeholder="Address" />
    <MudTextField @bind-Value="vm.DriverLicenseNumber" For="@( () => vm.DriverLicenseNumber)" Label="Driver License Number" Placeholder="Driver License Number" />
    <MudDatePicker Label="Driver License Expiry Date" Editable="true" @bind-Date="vm.DriverLicenseExpiryDate" Placeholder="Select Date" For="@(() => vm.DriverLicenseExpiryDate)"
                   MinDate="DateTime.Today" />
    <MudSelect T="DriverLicenseCategory" @bind-SelectedValues="@vm.SelectedDriverLicenseCategories" MultiSelection="true"
               MultiSelectionTextFunc="@(GetMultiSelectionText)"
               For="@( () => vm.DriverLicenseCategoriesForValidation)"
               Label="Driver License Categories" Placeholder="Please select driver license categories"
               AnchorOrigin="Origin.CenterCenter">
        @if (DriverLicenseCategories != null)
        {
            foreach (var options in DriverLicenseCategories)
            {
                <MudSelectItem T="DriverLicenseCategory" Value="@options">@options?.DriverLicenseCategoryName</MudSelectItem>

            }
        }

    </MudSelect>
    
    <MudTextField T="string" Label="Phone Number" Placeholder="Phone Number" For="@(() => vm.PhoneNumber)"
                  InputType="InputType.Telephone" @bind-Value="vm.PhoneNumber" />
    <MudTextField T="string" Label="Email" Placeholder="Email" For="@(() => vm.EmailAddress)"
                  InputType="InputType.Email" @bind-Value="vm.EmailAddress" />
    <MudTextField T="string" Label="Password" Placeholder="Password" For="@(() => vm.Password)"
                  InputType="InputType.Password" @bind-Value="vm.Password" />
    <MudTextField T="string" Label="Confirm Password" For="@(() => vm.ConfirmPassword)"
                  InputType="InputType.Password" Placeholder="Confirm Password" @bind-Value="vm.ConfirmPassword" />

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Create</MudButton>
</EditForm>

@code {
    public IEnumerable<City?>? Cities { get; set; } = new List<City>();
    
    public IEnumerable<DriverLicenseCategory?>? DriverLicenseCategories { get; set; } = new List<DriverLicenseCategory>();
    public RegisterDriverViewModel vm { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Cities = (await cityService.GetAllCitiesAsync()).ToList();
        DriverLicenseCategories = (await driverLicenseCategoryService.GetAllDriverLicenseCategoriesAsync()).ToList();
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if(selectedValues.Count == 0)
        {
            return $"{selectedValues.Count} driver license categories has been selected ";
        }
        if (selectedValues.Count == 1)
        {
            return $"{selectedValues.Count} driver license category has been selected ";
        }
        else
        {
            return $"{selectedValues.Count} driver license categories have been selected ";
        }


    }
    
    private async Task Submit()
    {

        var driverJwt = await service.RegisterDriver(new Public.App.DTO.v1.Identity.RegisterDriver()
            {
                FirstName = vm.FirstName,
                LastName = vm.LastName,
                Gender = vm.Gender.Value,
                DateOfBirth = vm.DateOfBirth.Value.ToString(),
                PersonalIdentifier = vm.PersonalIdentifier,
                CityId = vm.City.Id,
                Address = vm.Address,
                DriverLicenseNumber = vm.DriverLicenseNumber,
                DriverLicenseCategoryIds = vm.SelectedDriverLicenseCategories.Select(x => x.Id).ToArray(),
                DriverLicenseExpiryDate = vm.DriverLicenseExpiryDate.Value.ToString(),
                PhoneNumber = vm.PhoneNumber,
                Email = vm.EmailAddress,
                Password = vm.Password
            });
        var validator = new ITaxiAuthTokenHandler(_appState, _httpClientFactory);
        var token = await validator.AuthenticateToken(vm.EmailAddress, vm.Password);
        if (token != null)
        {
            await _appState.SetAuthResponse(token);
            vm.IsAuthenicated = true;
            nav.NavigateTo("/");
        }
    }
}
