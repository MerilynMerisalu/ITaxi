@page "/vehicle/Create"
@using ITaxi.Enum.Enum
@using ITaxi.Service
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using Public.App.DTO.v1.AdminArea
@using Webapp.ViewModels
@inject VehicleTypeService vehicleTypesService
@inject VehicleMarkService vehicleMarksService
@inject VehicleModelService vehicleModelService
@inject VehicleService vehicleService
@inject NavigationManager nav;
@inject ISnackbar snackbar

<PageTitle>Vehicle Create</PageTitle>
<h1>Create</h1>
<h4>Vehicle</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="vm" OnValidSubmit="Submit" >
           <FluentValidationValidator></FluentValidationValidator>
           <ValidationSummary style="color:red"></ValidationSummary>
            <MudSelect @bind-Value="@vm.Type" For="@( () => vm.Type)" Label="Vehicle Type" Placeholder="Please select a type"
                AnchorOrigin="Origin.CenterCenter">
                @if (VehicleTypes != null)
                {
                    foreach (var option in VehicleTypes)
                    {
                        <MudSelectItem Value="@option">@option.VehicleTypeName</MudSelectItem>
                        
                    }
                }
               
            </MudSelect>

            <MudSelect @bind-Value="@vm.Mark" For="@( () => vm.Mark)" Label="Vehicle Mark" Placeholder="Please select a mark" AnchorOrigin="Origin.CenterCenter">
                    @if (VehicleTypes != null)
                    {
                        foreach (var option in VehicleMarks)
                        {
                            <MudSelectItem Value="@option">@option.VehicleMarkName</MudSelectItem>
                        }
                    }

                </MudSelect>

            @if (vm.Mark != null)
            {
                <MudSelect @bind-Value="@vm.Model" For="@( () => vm.Model)" Label="Vehicle Model" Placeholder="Please select a model" AnchorOrigin="Origin.CenterCenter">
                    @if (VehicleTypes != null)
                    {
                        foreach (var option in VehicleModels.Where(x => x.VehicleMarkId == vm.Mark.Id))
                        {
                            <MudSelectItem Value="@option">@option.VehicleModelName</MudSelectItem>
                        }
                    }

                </MudSelect>
            }
            
                <MudTextField @bind-Value="vm.VehiclePlateNumber" For="@( () =>  vm.VehiclePlateNumber)" Label="Plate number" />
            
            <MudSelect @bind-Value="@vm.VehicleManufactureYear" For="@( () => vm.VehicleManufactureYear)" Label="Manufacture Year" Placeholder="Please select a manufacture year" AnchorOrigin="Origin.CenterCenter">
              
                    @foreach (var option in ManuFactureYears)
                    {
                        <MudSelectItem T="int?" Value="@option"></MudSelectItem>
                    }

            </MudSelect>
            <MudNumericField T="int" @bind-Value="vm.NumberOfSeats" For="@( () => vm.NumberOfSeats)" Label="Number of Seats" Min="2" Max="6" />
            <MudSelect @bind-Value="@vm.VehicleAvailability" For="@( () => vm.VehicleAvailability)" Label="Vehicle Availability" Placeholder="Please select a availability" AnchorOrigin="Origin.CenterCenter">
                    @foreach (var option in Enum.GetValues<VehicleAvailability>())
                    {
                    <MudSelectItem T="VehicleAvailability?" Value="@option">@option</MudSelectItem>
                    }

            </MudSelect>
               
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Create</MudButton>
        
        </EditForm>
    </div>
</div>
@code {
    public CreateEditVehicleViewModel vm = new();
    public VehicleValidator validations = new();
    List<VehicleType>? VehicleTypes = new List<VehicleType>();
     List<VehicleMark>? VehicleMarks = new List<VehicleMark>();
     List<VehicleModel>? VehicleModels = new List<VehicleModel>();
    
     public List<int> ManuFactureYears = new List<int>();
    

    protected override async Task OnInitializedAsync()
    {
        VehicleTypes = (await vehicleTypesService.GetAllVehicleTypesAsync()).ToList();
        VehicleMarks = (await vehicleMarksService.GetAllVehicleMarksAsync()).ToList();
        VehicleModels = (await vehicleModelService.GetAllVehicleModelsAsync()).ToList();
        ManuFactureYears = ( await vehicleService.GetManufactureYears()).ToList();

    }
    

    private async Task Submit()
    {
        await vehicleService.AddEntity(new Public.App.DTO.v1.DriverArea.Vehicle
            {
                VehicleTypeId = vm.Type.Id,
                VehicleMarkId = vm.Mark.Id,
                VehicleModelId = vm.Model.Id,
                VehiclePlateNumber = vm.VehiclePlateNumber,
                ManufactureYear = vm.VehicleManufactureYear.Value,
                NumberOfSeats = vm.NumberOfSeats,
                VehicleAvailability = vm.VehicleAvailability.Value,


            });
            snackbar.Add("Vehicle created successfully", Severity.Success);
            nav.NavigateTo("/vehicles/index");
    }
}
