@page "/vehicles/Edit/{Id:guid}"
@using ITaxi.Enum.Enum
@using ITaxi.Service
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using Public.App.DTO.v1.AdminArea
@using Public.App.DTO.v1.DriverArea
@using Webapp.ViewModels
@inject VehicleTypeService vehicleTypesService
@inject VehicleMarkService vehicleMarksService
@inject VehicleModelService vehicleModelService
@inject VehicleService vehicleService
@inject NavigationManager nav;
@inject ISnackbar snackbar

<PageTitle>Vehicle Edit</PageTitle>
<h1>Edit</h1>
<h4>Vehicle</h4>
<hr />
@if (vehicle == null)
{
    <p><i>Loading...</i></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="_vm" OnValidSubmit="Submit">
                <FluentValidationValidator />
                <MudSelect @bind-Value="@_vm.Type" For="@( () => _vm.Type)" Label="Vehicle Type" Placeholder="Please select a type" AnchorOrigin="Origin.CenterCenter">
                    @if (VehicleTypes != null)
                    {
                        foreach (var option in VehicleTypes)
                        {
                            <MudSelectItem Value="@option" >@option.VehicleTypeName</MudSelectItem>
                        }
                    }

                </MudSelect>

                <MudSelect @bind-Value="@_vm.Mark" For="@( () => _vm.Mark)" Label="Vehicle Mark" Placeholder="Please select a mark" AnchorOrigin="Origin.CenterCenter">
                    @if (VehicleTypes != null)
                    {
                        foreach (var option in VehicleMarks)
                        {
                            <MudSelectItem Value="@option">@option.VehicleMarkName</MudSelectItem>
                        }
                    }

                </MudSelect>

                @if (_vm.Mark != null)
                {
                    <MudSelect @bind-Value="@_vm.Model" For="@( () => _vm.Model)" Label="Vehicle Model" Placeholder="Please select a model" AnchorOrigin="Origin.CenterCenter">
                        @if (VehicleTypes != null)
                        {
                            foreach (var option in VehicleModels.Where(x => x.VehicleMarkId == _vm.Mark.Id))
                            {
                                <MudSelectItem Value="@option">@option.VehicleModelName</MudSelectItem>
                            }
                        }

                    </MudSelect>
                }

                <MudTextField @bind-Value="_vm.VehiclePlateNumber" For="@( () =>  _vm.VehiclePlateNumber)" Label="Plate number" />
                <MudSelect @bind-Value="@_vm.VehicleManufactureYear" For="@( () => _vm.VehicleManufactureYear)" Label="Manufacture Year" Placeholder="Please select a manufacture year" AnchorOrigin="Origin.CenterCenter">

                    @foreach (var option in ManuFactureYears)
                    {
                        <MudSelectItem T="int?" Value="@option"></MudSelectItem>
                    }

                </MudSelect>
                <MudNumericField @bind-Value="_vm.NumberOfSeats" T="int" For="@( () => _vm.NumberOfSeats)" Label="Number of Seats" Min="2" Max="6" />
                <MudSelect @bind-Value="@_vm.VehicleAvailability" For="@( () => _vm.VehicleAvailability)" Label="Vehicle Availability" Placeholder="Please select a availability" AnchorOrigin="Origin.CenterCenter">
                    @foreach (var option in Enum.GetValues<VehicleAvailability>())
                    {
                        <MudSelectItem T="VehicleAvailability?" Value="@option">@option</MudSelectItem>
                    }

                </MudSelect>

                <MudButton OnClick="Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Edit</MudButton>

            </EditForm>
        </div>
    </div>

}
@code {
    public CreateEditVehicleViewModel _vm = new();


    List<VehicleType>? VehicleTypes = new List<VehicleType>();
    List<VehicleMark>? VehicleMarks = new List<VehicleMark>();
    List<VehicleModel>? VehicleModels = new List<VehicleModel>();

    public List<int> ManuFactureYears = new List<int>();
    Vehicle vehicle;


    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        vehicle = await vehicleService.GetVehicleByIdAsync(Id);
        //_vm.VehicleTypeId = vehicle.VehicleTypeId;
        _vm.Type = vehicle.VehicleType;
        _vm.Mark = vehicle.VehicleMark;
        _vm.Model = vehicle.VehicleModel;
        _vm.VehiclePlateNumber = vehicle.VehiclePlateNumber;
        _vm.VehicleManufactureYear = vehicle.ManufactureYear;
        _vm.NumberOfSeats = vehicle.NumberOfSeats;
        _vm.VehicleAvailability = vehicle.VehicleAvailability;
        VehicleTypes = (await vehicleTypesService.GetAllVehicleTypesAsync()).ToList();
        VehicleMarks = (await vehicleMarksService.GetAllVehicleMarksAsync()).ToList();
        VehicleModels = (await vehicleModelService.GetAllVehicleModelsAsync()).ToList();
        ManuFactureYears = (await vehicleService.GetManufactureYears()).ToList();

    }


    private async Task Submit()
    {
        vehicle.VehicleTypeId = _vm.Type.Id;
        vehicle.VehicleMarkId = _vm.Mark.Id;
        vehicle.VehicleModelId = _vm.Model.Id;
        vehicle.VehiclePlateNumber = _vm.VehiclePlateNumber;
        vehicle.ManufactureYear = _vm.VehicleManufactureYear.Value;
        vehicle.NumberOfSeats = _vm.NumberOfSeats;
        vehicle.VehicleAvailability = _vm.VehicleAvailability.Value;
        await vehicleService.UpdateEntityAsync( vehicle); 
        snackbar.Add("Vehicle updated successfully", Severity.Success);
        nav.NavigateTo("/vehicles/index");
    }
}
