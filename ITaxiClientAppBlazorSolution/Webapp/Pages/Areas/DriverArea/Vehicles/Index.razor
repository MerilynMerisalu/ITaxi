@page "/vehicles/index"
@using ITaxi.Public.DTO.v1.DriverArea
@using ITaxi.Service

@inject VehicleService service;
<h1>Index</h1>
<p>
    <a href="/vehicle/Create">Create New</a>
</p>
@if (Vehicles == null)
{
    <p>...Loading</p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Vehicle Type</th>
            <th>Vehicle Mark</th>
            <th>Vehicle Model</th>
            <th>Vehicle Plate Number</th>
            <th>Manufacture Year</th>
            <th>Number of Seats</th>
            <th>Vehicle Availability</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Vehicles)
        {
            <tr>
                <td>@item.VehicleType</td>
                <td>@item.VehicleMark?.VehicleMarkName</td>
                <td>@item.VehicleModel?.VehicleModelName</td>
                <td>@item.VehiclePlateNumber</td>
                <td>@item.ManufactureYear</td>
                <td>@item.NumberOfSeats</td>
                <td>@item.VehicleAvailability</td>
                <td>
                    <a href="@($"Vehicles/Edit/{item.Id}")">Edit</a>
                    <a href="@($"Vehicles/Details/{item.Id}")">Details</a>
                    <a href="@($"Vehicles/Delete/{item.Id}")">Delete</a>
                    <a href="@($"Vehicles/Gallery/{item.Id}")">Gallery</a>
                </td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    IEnumerable<Vehicle>? Vehicles = new List<Vehicle>();

    protected override async Task OnInitializedAsync()
    {
        // Don't bother calling base, it doesn't do anything anyway in razor pages :P
        //return base.OnInitializedAsync();

        Vehicles = (await service.GetAllVehiclesAsync()).ToList();
    }
}
