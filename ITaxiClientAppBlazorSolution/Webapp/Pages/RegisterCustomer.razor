@page "/registerCustomer"
@using Base.Service.Contracts
@using BlazorWebApp.Services
@using ITaxi.Enum.Enum
@using ITaxi.Service
@using Public.App.DTO.v1.AdminArea
@using Webapp.Services
@using Webapp.ViewModels
@inject DisabilityTypeService disabilityTypeService
@inject RegisterService service
@inject NavigationManager nav
@inject IAppState _appState
@inject IHttpClientFactory _httpClientFactory
@inject ISnackbar bar;


<h1>Register Customer</h1>

<EditForm Model="vm" OnValidSubmit="Submit">
    <FluentValidationValidator></FluentValidationValidator>
    <ValidationSummary style="color:red"></ValidationSummary>

    <MudTextField @bind-Value="vm.FirstName" For="@( () =>  vm.FirstName)" Label="First Name" />
    <MudTextField @bind-Value="vm.LastName" For="@( () =>  vm.LastName)" Label="Last Name" />
    <MudSelect @bind-Value="@vm.Gender" For="@( () => vm.Gender)" Label="Gender" Placeholder="Please Select a Gender" AnchorOrigin="Origin.CenterCenter">
        @foreach (var option in Enum.GetValues<Gender>())
        {
            <MudSelectItem T="Gender?" Value="@option">@option</MudSelectItem>
        }

    </MudSelect>
    <MudDatePicker Label="Date of Birth" Editable="true" @bind-Date="vm.DateOfBirth" Placeholder="Select Date" For="@(() => vm.DateOfBirth)"
                   MaxDate="DateTime.Today" />
    <MudSelect @bind-Value="@vm.DisabilityType" For="@( () => vm.DisabilityType)" Label="Disability Type" Placeholder="Please select a disability type"
               AnchorOrigin="Origin.CenterCenter">
        @if (DisabilityTypes != null)
        {
            foreach (var option in DisabilityTypes)
            {
                <MudSelectItem Value="@option">@option?.DisabilityTypeName</MudSelectItem>

            }
        }

    </MudSelect>
    <MudTextField T="string" Label="Phone Number" Placeholder="Phone Number" For="@(() => vm.PhoneNumber)"
        InputType="InputType.Telephone" @bind-Value="vm.PhoneNumber"/>
    <MudTextField T="string" Label="Email" Placeholder="Email" For="@(() => vm.EmailAddress)"
        InputType="InputType.Email" @bind-Value="vm.EmailAddress" />
    <MudTextField T="string" Label="Password" Placeholder="Password" For="@(() => vm.Password)"
        InputType="InputType.Password" @bind-Value="vm.Password" />
    <MudTextField T="string" Label="Confirm Password" For="@(() => vm.ConfirmPassword)"
        InputType="InputType.Password" Placeholder="Confirm Password" @bind-Value="vm.ConfirmPassword" />

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Create</MudButton>
</EditForm>

@code {

    public RegisterCustomerViewModel vm { get; set; } = new RegisterCustomerViewModel();
    public IEnumerable<DisabilityType?>?DisabilityTypes { get; set; }
    protected override async Task OnInitializedAsync()
    {

        DisabilityTypes = (await disabilityTypeService.GetAllDisabilityTypesAsync()).ToList();
    }
    private async Task Submit()
    {
        var customerJwt = await service.RegisterCustomer(new Public.App.DTO.v1.Identity.RegisterCustomer()
            {
                FirstName = vm.FirstName,
                LastName = vm.LastName,
                Gender = vm.Gender.Value,
                DateOfBirth = vm.DateOfBirth.Value.ToString(),
                DisabilityTypeId = vm.DisabilityType.Id,
                PhoneNumber = vm.PhoneNumber,
                Email = vm.EmailAddress,
                Password = vm.Password
            });
            var validator = new ITaxiAuthTokenHandler(_appState, _httpClientFactory);
        var token = await validator.AuthenticateToken(vm.EmailAddress, vm.Password);
        if (token != null)
        {
            await _appState.SetAuthResponse(token);
            vm.IsAuthenicated = true;
            nav.NavigateTo("/");
        }
        
    }
    
   
}
